from subprocess import Popen, PIPE
from functools import reduce
import os
import sys
import click


def is_err(errbytes):
    return len(errbytes) > 0


def get_stat(filename):
    p = Popen(
        ["stat", "-c", "%a %n", filename],
        stdout=PIPE,
        stderr=PIPE
    )
    output, err = p.communicate()
    return output if not is_err(err) else None


def get_filenames(directory):
    p = Popen(["ls", directory], stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    output = output.splitlines()
    return output if not is_err(err) else None


def get_stats(directory):
    filenames = get_filenames(directory)
    filenames = filter(None, filenames)
    return list(map(get_stat, filenames))


def decode(b):
    if not b:
        return None
    return b.decode("utf-8")


def clean_newline(s):
    if not s:
        return None
    return s.replace("\n", "")


def cleanup_termout(term_out):
    cleaned_out = filter(None, term_out)
    cleaned_out = map(decode, cleaned_out)
    cleaned_out = map(clean_newline, cleaned_out)
    return list(cleaned_out)


def is_perm(stat_str, perm):
    return stat_str[:3] == str(perm)


def chmod(filename, perm):
    p = Popen(
        ["chmod", str(perm), filename],
        stdout=PIPE,
        stderr=PIPE
    )
    err = p.communicate()[1]
    return not is_err(err)


def chmod_file(filename, new_perm, old_perm=None):
    stat = clean_newline(decode(get_stat(filename)))
    if not stat:
        return False
    if old_perm and not is_perm(stat, old_perm):
        return False
    return chmod(filename, new_perm)


def split_stat_str(stat):
    return stat.split(" ")


def chmod_directory(directory, new_perm, old_perm=None):
    ret = False
    stats = map(split_stat_str, cleanup_termout(get_stats(directory)))
    for stat in stats:
        curr_perm, curr_file = stat
        if old_perm and not is_perm(curr_perm, old_perm):
            continue
        if chmod(curr_file, new_perm):
            ret = True
    return ret

# TODO: type = click.File(...)


def is_file(s):
    return os.path.isfile(s)


def is_dir(s):
    return os.path.isdir(s)


@click.group()
def cli():
    pass


@click.command()
@click.argument("input")
def read(input):
    if is_file(input):
        ret = clean_newline(decode(get_stat(input)))
    elif is_dir(input):
        ret = "\n".join(cleanup_termout(get_stats(input)))
    else:
        click.echo("{} does not exist".format(input))
        sys.exit(1)
    click.echo(ret)
    sys.exit(0)


def valid_perm(perm):
    octals = list("01234567")
    return (
        len(perm) == 3 and
        reduce(lambda x, y: x and y, [digit in octals for digit in perm])
    )


@click.command()
@click.argument("input", nargs=1)
@click.argument("perm", nargs=1)
@click.option("--filter", default=None, help="Permission type to update")
def write(input, perm, filter):
    if not valid_perm(perm):
        click.echo("{} is not avalid UNIX permission", perm)
        sys.exit(1)
    if filter and not valid_perm(filter):
        click.echo("{} is not avalid UNIX permission", filter)
        sys.exit(1)
    if is_file(input):
        success = chmod_file(input, perm, old_perm=filter)
    elif is_dir(input):
        success = chmod_directory(input, perm, old_perm=filter)
    else:
        click.echo("{} does not exist".format(input))
        sys.exit(1)
    sys.exit(0) if success else sys.exit(1)


cli.add_command(read)
cli.add_command(write)


cli()
